import java.util.ArrayList;


/**
 * <h1>CargoPlane</h1> Represents a Cargo Plane
 */
public class CargoPlane extends Vehicle {
    final double GAS_RATE = 2.33;

    /**
     * Default Constructor
     */
    //============================================================================
    public CargoPlane() {
        super();
    }
    
    //============================================================================

    /**
     * Constructor
     *
     * @param licensePlate license plate of vehicle
     * @param maxWeight    maximum weight that the vehicle can hold
     */
    //============================================================================
    public CargoPlane(String licensePlate, double maxWeight) {
        super(licensePlate, maxWeight);
    }
    
    //============================================================================

    /**
     * Overides its superclass method. Instead, after each iteration, the range will
     * increase by 10.
     *
     * @param warehousePackages List of packages to add from
     */
    @Override
    public void fill(ArrayList<Package> warehousePackages) {
        int difference = 0;
        int counter = 0;

        while (counter < warehousePackages.size()) {
            for (Package currentItem : warehousePackages) {
                if (Math.abs(currentItem.getDestination().getZipCode() - getZipDest()) < difference &&
                        Math.abs(currentItem.getDestination().getZipCode() - getZipDest()) > (difference - 10)) {
                    addPackage(currentItem);
                    counter++;  //iterates so that you know each item in the list has been checked
                }
            }
            difference += 10;   //iterates so that the difference in zip codes increments by 10
        }
    }

    /*
     * =============================================================================
     * | Methods from Profitable Interface
     * =============================================================================
     */

    /**
     * Returns the profits generated by the packages currently in the Cargo Plane.
     * <p>
     * &sum;p<sub>price</sub> - (range<sub>max</sub> &times; 2.33)
     * </p>
     */
    @Override
    public double getProfit() {
        double income = 0;
        for (Package currentItem: getPackages()) {
            income += currentItem.getPrice();
        }

        double costs = GAS_RATE * getDistanceTraveled();

        return income - costs;
    }

    /**
     * Generates a String of the Cargo Plane report. Cargo plane report includes:
     * <ul>
     * <li>License Plate No.</li>
     * <li>Destination</li>
     * <li>Current Weight/Maximum Weight</li>
     * <li>Net Profit</li>
     * <li>Shipping labels of all packages in cargo plane</li>
     * </ul>
     *
     * @return Cargo Plane Report
     */
    @Override
    public String report() {
        String output = "==========Cargo Plane Report==========\n" +
                "License Plate No.: " + getLicensePlate() + "\n" +
                "Destination: " + getZipDest() + "\n" +
                "Weight Load: " + getCurrentWeight() + "/" + getMaxWeight() + "\n" +
                "Net Profit: $" + getProfit() + "\n" +
                "=====Shipping Labels=====\n";

        for (Package currentItem: getPackages()) {
            output += currentItem.shippingLabel();
        }

        return output;
    }

    //method that is used in DatabaseManager in the saveVehicles() method
    public String getType() {
        return "Cargo Plane";
    }
   
   
}